generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model test {
  createdAt DateTime? @db.Date
  id        Int       @id
}

model User {
  id          String   @id @default(uuid())
  firstName   String
  lastName    String
  email       String   @unique
  phoneNumber String?  @unique
  password    String
  verified    Boolean  @default(false)
  isActive    Boolean  @default(true)
  image       String?
  roleId      String
  role        Role     @relation(fields: [roleId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Room {
  id           String    @id @default(uuid())
  name         String    @unique
  description  String?
  images       String[]  @default([])
  video        String?
  available    Boolean   @default(true)
  price        Float     @default(0.0)
  parkingSpace Int?
  size         String
  isDeleted    Boolean   @default(false)
  location     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  Booking      Booking[]
}

model menuCategory {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  menuItem    menuItem[]
}

model menuItem {
  id          String       @id @default(uuid())
  name        String
  description String?
  price       Float        @default(0.0)
  image       String
  categoryId  String
  category    menuCategory @relation(fields: [categoryId], references: [id])
  createdAt   DateTime     @default(now())
}

model Role {
  id    String   @id @default(uuid())
  name  RoleData @unique @default(ADMIN)
  users User[]
}

model Booking {
  id            String      @id @default(uuid())
  name          String
  email         String
  phoneNumber   String
  roomId        String
  room          Room        @relation(fields: [roomId], references: [id])
  checkIn       DateTime
  checkOut      DateTime
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String      @unique
  totalPrice    Float       @default(0.0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Transaction {
  id                   String   @id @default(uuid())
  amount               Float    @default(0.0)
  transactionid        String   @unique
  name                 String
  email                String
  phoneNumber          String
  requesttransactionid String   @unique
  status               String   @default("pending")
  reason               String   @default("Booking Payment")
  type                 String   @default("incoming")
  booking              Booking? @relation()
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

enum RoleData {
  ADMIN
}
